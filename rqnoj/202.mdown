#RQNOJ 202
##题目描述
5月8日，在世界人民的共同关注下，象征着和平、友谊、圣洁的奥运火炬终于来到了世界之巅——珠穆朗玛峰……
登上珠峰可不是所有人都能办得了的，火炬手们为了登山要使用特殊的装备。他有一个带2种气体的气缸：一个为氧气，一个为氮气。让火炬手需要各种的数量的氧和氮。火炬手有一定数量的气缸。每个气缸都有重量和气体容量。火炬手为了完成传递需要特定数量的氧和氮。他完成传递所需气缸的总重的最低限度的是多少？
例如：火炬手有5个气缸。每行三个数字为：氧，氮的（升）量和气缸的重量：
3 36 120
10 25 129
5 50 250
1 45 130
4 20 119
如果火炬手需要5升的氧和60升的氮则总重最小为249 （1，2或者4，5号气缸）。
你的任务就是计算火炬手为了完成传递需要的气缸的重量的最低值。
##输入格式
输入：
第一行有2整数t，a（1<=t<=21，1<=a<=79）。它们表示氧，氮各自需要的量。
第二行为整数n （1<=n<=1000）表示气缸的个数。
此后的n行，每行包括ti，ai，wi（1<=ti<=21，1<=ai<=79，1<=wi<=800）3整数。这些各自是：第i个气缸里的氧和氮的容量及汽缸重量。
##输出格式
输出：
仅一行包含一个整数，为火炬手完成传递所需的气缸的重量总和的最低值。
##样例输入
	5 60
	5
	3 36 120
	10 25 129
	5 50 250
	1 45 130
	4 20 119
##样例输出
	249
##分析
双背包dp，用dp\[i]\[j]表示达到氧气为I，氮气为J的最小价值。
###状态转移
假设有气缸为x,y,z。转移方程为:
**dp\[a]\[b]=min(dp\[a]\[b],dp\[a+x]\[b+y]+z);**
###转移顺序
对于每一个气缸，**逆序**枚举a,b,否则会有一个气缸使用好几遍的尴尬情况。
##代码如下
```
#include <iostream>
#include <string.h>
using namespace std;

int dp[205][205];
int N,O,n;
int x,y,z;
int minW=0x3f3f3f3f;
int main()
{
	memset(dp,0x3f,sizeof(dp));
	dp[0][0]=0;
	cin>>O>>N>>n;
	while(n--)
	{
		cin>>x>>y>>z;
		for(int i=O;i>=0;i--)
			for(int j=N;j>=0;j--)
			{	
				int a=min(i+x,O),b=min(j+y,N);
				dp[a][b]=min(dp[a][b],dp[i][j]+z);
			}
	}
	cout<<dp[O][N]<<endl;
}
```